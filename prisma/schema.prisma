// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Frequency {
  AS_NEEDED
  DAILY
  SELECTED_DAYS
  DAY_INTERVAL
  MONTH_INTERVAL
}

model Resource {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  roleAccesesResources RoleAccessesResource[]

  @@map("resource")
}

model RoleAccessesResource {
  resourceId Int      @map("resource_id")
  roleId     Int      @map("role_id")
  canView    Boolean  @default(false) @map("can_view")
  canAdd     Boolean  @default(false) @map("can_add")
  canEdit    Boolean  @default(false) @map("can_edit")
  canDelete  Boolean  @default(false) @map("can_delete")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  resource Resource @relation(fields: [resourceId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])

  @@id([resourceId, roleId])
  @@map("role_accesses_resource")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  roleAccessesResources RoleAccessesResource[]
  UserAccount           UserAccount[]

  @@map("role")
}

model UserAccount {
  id                   Int       @id @default(autoincrement())
  code                 String    @default(uuid())
  email                String?   @unique @db.VarChar(255)
  firstName            String?   @map("first_name") @db.VarChar(255)
  lastName             String?   @map("last_name") @db.VarChar(255)
  gender               Gender?
  address              String?   @db.VarChar(255)
  socialSecurityNumber String?   @unique @map("social_security_number") @db.Text
  nationality          String?   @db.VarChar(255)
  birthday             DateTime? @db.Date
  lastActive           DateTime  @default(now()) @map("last_active")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  roleId               Int       @map("role_id")
  role                 Role      @relation(fields: [roleId], references: [id])

  patientAccount  PatientAccount?
  operatorAccount OperatorAccount?
  Attachment      Attachment[]

  @@map("user_account")
}

model OperatorAccount {
  username      String  @unique @db.VarChar(255)
  passwordHash  String  @map("password_hash") @db.Text
  phoneNumber   String? @map("phone_number") @db.VarChar(255)
  userAccountId Int     @unique @map("user_account_id")
  hospitalId    Int     @map("hospital_id")

  userAccount          UserAccount           @relation(fields: [userAccountId], references: [id])
  hospital             Hospital              @relation(fields: [hospitalId], references: [id])
  hospitalAdminAccount HospitalAdminAccount?
  doctorAccount        DoctorAccount?

  @@map("operator_account")
}

model HospitalAdminAccount {
  operatorAccountId Int             @unique @map("operator_account_id")
  operatorAccount   OperatorAccount @relation(fields: [operatorAccountId], references: [userAccountId])

  doctorAccounts DoctorAccount[]

  @@map("hospital_admin_account")
}

model DoctorAccount {
  operatorAccountId      Int     @unique @map("operator_account_id")
  hospitalAdminAccountId Int     @map("hospital_admin_account_id")
  faculty                String? @db.VarChar(255)
  yearOfExperience       Float?  @map("year_of_experience")

  operatorAccount       OperatorAccount        @relation(fields: [operatorAccountId], references: [userAccountId])
  hospitalAdminAccount  HospitalAdminAccount   @relation(fields: [hospitalAdminAccountId], references: [operatorAccountId])
  qualifications        Qualification[]
  doctorManagesPatients DoctorManagesPatient[]
  medicationPlans       MedicationPlan[]

  @@map("doctor_account")
}

model DoctorManagesPatient {
  doctorAccountId  Int @map("doctor_account_id")
  patientAccountId Int @map("patient_account_id")

  doctorAccount  DoctorAccount  @relation(fields: [doctorAccountId], references: [operatorAccountId])
  patientAccount PatientAccount @relation(fields: [patientAccountId], references: [userAccountId])

  @@id([doctorAccountId, patientAccountId])
  @@map("doctor_manages_patient")
}

model Qualification {
  doctorAccountId Int      @map("doctor_account_id")
  name            String   @db.VarChar(255)
  expireDay       DateTime @map("expire_day")

  doctorAccount DoctorAccount @relation(fields: [doctorAccountId], references: [operatorAccountId])

  @@id([doctorAccountId, name])
  @@map("qualification")
}

model PatientAccount {
  phoneNumber     String  @unique @map("phone_number") @db.VarChar(255)
  passwordHash    String  @map("password_hash") @db.Text
  username        String? @default(uuid()) @db.VarChar(255)
  insuranceNumber String? @unique @map("insurance_number") @db.VarChar(255)
  occupation      String? @db.VarChar(255)
  userAccountId   Int     @unique @map("user_account_id")

  userAccount           UserAccount            @relation(fields: [userAccountId], references: [id])
  doctorManagesPatients DoctorManagesPatient[]
  medicationPlans       MedicationPlan[]
  reminderPlans         ReminderPlan[]
  patientSavesArticles  PatientSavesArticle[]

  @@map("patient_account")
}

model Article {
  id         Int      @id @default(autoincrement())
  hospitalId Int      @map("hospital_id")
  title      String   @unique @db.Text
  content    String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  hospital                   Hospital                    @relation(fields: [hospitalId], references: [id])
  patientSavesArticles       PatientSavesArticle[]
  articleIncludesAttachments ArticleIncludesAttachment[]

  @@map("article")
}

model PatientSavesArticle {
  patientAccountId Int      @map("patient_account_id")
  articleId        Int      @map("article_id")
  createdAt        DateTime @default(now()) @map("created_at")

  article        Article        @relation(fields: [articleId], references: [id])
  patientAccount PatientAccount @relation(fields: [patientAccountId], references: [userAccountId])

  @@id([patientAccountId, articleId])
  @@map("patient_saves_article")
}

model Hospital {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  articles         Article[]
  operatorAccounts OperatorAccount[]

  @@map("hospital")
}

model MedicationPlan {
  id                 Int       @id @default(autoincrement())
  doctorAccountId    Int       @map("doctor_account_id")
  patientAccountId   Int       @map("patient_account_id")
  name               String?   @db.VarChar(255)
  frequency          Frequency @default(AS_NEEDED)
  note               String?   @db.Text
  stockInformation   Json      @map("stock_information") @db.Json
  takenRemindersPlan Int?      @map("taken_reminders_plan")
  startDate          DateTime  @map("start_date")
  endDate            DateTime? @map("end_date")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  doctorAccount  DoctorAccount  @relation(fields: [doctorAccountId], references: [operatorAccountId])
  patientAccount PatientAccount @relation(fields: [patientAccountId], references: [userAccountId])
  reminderPlans  ReminderPlan[]

  @@map("medication_plan")
}

model ReminderPlan {
  id               Int       @id @default(autoincrement())
  isTaken          Boolean   @default(false) @map("is_taken")
  isSkipped        Boolean   @default(false) @map("is_skipped")
  note             String?   @db.Text
  sentAt           DateTime? @map("sent_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  medicationPlanId Int       @map("medication_plan_id")
  patientAccountId Int       @map("patient_account_id")

  medicationPlan                  MedicationPlan                   @relation(fields: [medicationPlanId], references: [id])
  patientAccount                  PatientAccount                   @relation(fields: [patientAccountId], references: [userAccountId])
  reminderPlanIncludesMedications ReminderPlanIncludesMedication[]

  @@map("reminder_plan")
}

model ReminderPlanIncludesMedication {
  reminderPlanId      Int     @map("reminder_plan_id")
  medicationId        Int     @map("medication_id")
  isLocal             Boolean @default(false) @map("is_local")
  localMedicationName String? @map("local_medication_name")
  amount              Int     @default(0)

  reminderPlan ReminderPlan @relation(fields: [reminderPlanId], references: [id])
  medication   Medication   @relation(fields: [medicationId], references: [id])

  @@id([reminderPlanId, medicationId])
  @@map("reminder_plan_includes_medication")
}

model Medication {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(255)
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  reminderPlanIncludesMedications ReminderPlanIncludesMedication[]

  @@map("medication")
}

model ArticleIncludesAttachment {
  articleId    Int @map("article_id")
  attachmentId Int @map("attachment_id")

  article    Article    @relation(fields: [articleId], references: [id])
  attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@id([articleId, attachmentId])
  @@map("article_includes_attachment")
}

model Attachment {
  id            Int      @id @default(autoincrement())
  userAccountId Int?     @map("user_account_id")
  fileName      String?  @map("file_name")
  filePath      String?  @map("file_path")
  fileSize      BigInt?  @map("file_size")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  userAccount                UserAccount?                @relation(fields: [userAccountId], references: [id])
  articleIncludesAttachments ArticleIncludesAttachment[]

  @@map("attachment")
}
